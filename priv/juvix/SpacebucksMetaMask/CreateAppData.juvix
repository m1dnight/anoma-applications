module SpacebucksMetaMask.CreateAppData;

import Stdlib.Prelude open;
import Applib open;
import Anoma.Encode open;
import Stdlib.Debug.Trace open;
import Anoma.Identity.External open;
import Anoma.Identity.Internal open;
import BaseLayer.ResourceMachine open;
import Anoma.Builtin.System as SystemBuiltins open;
import Spacebucks.Helpers open;
import Spacebucks.Signing open;
import SpacebucksMetaMask.MetaBuck open;

-- ----------------------------------------------------------------------------
--  Create a transaction to mint some spacebucks.
create-spacebucks-appdata
  {M : Type -> Type}
  {{Monad M}}
  {{Tx M}}
  (logic : Logic)
  (identity : ExternalIdentity)
  : M (List AnomaAtom) :=
  do {
    ctx <- getTxContext;
    nonce-created <- genRandomNonce;
    nonce-consumed <- genRandomNonce;
    let
      label := Label.mk 0;
      quantity := 10;

      -- the current root passed in via the transaction context
      current-root : CommitmentRoot := TxContext.currentRoot ctx;
      -- create the created resource and its commitment
      created-resource :=
        make-metabuck logic identity label quantity nonce-created;

      -- create the consumed ephemeral resource and its nullifier
      consumed-resource : Resource :=
        created-resource@Resource{
          ephemeral := true;
          nonce := nonce-consumed;
        };

      -- create commitments and nullifiers
      commitments : List Commitment :=
        commitments-for-created [created-resource];
      nullifiers : List Nullifier :=
        nullifiers-for-consumed [consumed-resource];

      rooted-nullifier :=
        RootedNullifiableResource.Transparent.mk current-root consumed-resource;

      to-sign := map encode-atom commitments ++ map encode-atom nullifiers;
    in
    pure to-sign;
  };

-- ----------------------------------------------------------------------------
--  Main function

main
  (message : Nat)
  (signature : AnomaAtom)
  (public-key : ByteArray)
  (logic : Logic)
  : List AnomaAtom :=
  let
    -- the identit of the user who signed to create the spacebucks
    identity : ExternalIdentity := fix-raw-public-key public-key;
    -- create the transaction context which holds the caller and the current root
    context : TxContext :=
      TxContext.mk@{
        caller := Universal.identity;
        currentRoot := CommitmentRoot.fromNat 0;
      };
    to-sign :=
      Private.runTxBuilder'
        0
        context
        (create-spacebucks-appdata logic identity);
  in trace "data being signed" >-> to-sign;
