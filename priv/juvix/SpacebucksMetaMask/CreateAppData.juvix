module SpacebucksMetaMask.CreateAppData;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;
import Applib open;
import Anoma.Encode open;
import Stdlib.Debug.Trace open;
import Anoma.Identity.External open;
import Anoma.Identity.Internal open;
import BaseLayer.ResourceMachine open;
import Anoma.Builtin.System as SystemBuiltins open;
import SpacebucksMetaMask.Helpers open;
import SpacebucksMetaMask.Signing open;
import SpacebucksMetaMask.MetaBuck open;

-- ----------------------------------------------------------------------------
--  Create a transaction to mint some spacebucks.
create-spacebucks-appdata
  {M : Type -> Type}
  {{Monad M}}
  {{Tx M}}
  (logic : Logic)
  (identity : ExternalIdentity)
  : M  (Pair Resource Resource) :=
  do {
    ctx <- getTxContext;
    nonce-created <- genRandomNonce;
    nonce-consumed <- genRandomNonce;
    let
      label := Label.mk 0;
      quantity := 10;
      -- create the created resource and its commitment
      created-resource := make-metabuck logic identity label quantity nonce-created;

      -- create the consumed ephemeral resource and its nullifier
      consumed-resource : Resource :=
        created-resource@Resource{
          ephemeral := true;
          nonce := nonce-consumed;
        };
    in
    trace "created" >-> trace created-resource >-> trace "consumed" >-> trace consumed-resource >-> pure (created-resource, consumed-resource);
  };

-- ----------------------------------------------------------------------------
--  Main function

main
  (message : Nat)
  (signature : AnomaAtom)
  (public-key : ByteArray)
  (logic : Logic)
  : AnomaAtom :=
  let
    -- the identit of the user who signed to create the spacebucks
    identity : ExternalIdentity := fix-raw-public-key public-key;
    -- create the transaction context which holds the caller and the current root
    context : TxContext :=
      TxContext.mk@{
        caller := Universal.identity;
        currentRoot := CommitmentRoot.fromNat 0;
      };
    -- the message the user has to sign in order to create a transaction
    to-sign :  (Pair Resource Resource) := Private.runTxBuilder' 0 context (create-spacebucks-appdata logic identity);
    encoded := encode-atom to-sign;
  in encode-atom encoded;
